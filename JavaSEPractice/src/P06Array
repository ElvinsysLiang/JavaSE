/**
* @author Elvinsys
* @version 2019年5月21日 下午2:34:31
* @Description：JavaSE――例程
*	
*	
*/

/*
 * 	例程编号：
 * 	描述：
 * 	说明：
 */
//例程
public class Demo{
	public static void main(String[] args) {
		System.out.println("这只是一个例程模板");
	}
}

/*
 * 	例程编号：039
 * 	描述：
 * 		用动态初始化一个有3个元素的int数组，顺便给元素赋初值，并打印每个元素以及数组的地址
 * 	说明：
 * 		1）数组的声明形式有两种：
 * 			1：int array[] = null;//这是以前的C/C++的方式，在Java中比较少用
 * 			2：int[] array = null;//把int[]看成一个数据类型，后面跟变量名，在Java中用得比较多
 * 		2）一个数组，要先声明，系统分配栈内存，然后再初始化，系统分配堆内存，其形式是这样：
 * 			int[] array = null;
 * 			array = new int[3];
 * 			上面这两行代码可以写成以下形式，并且在实际运用中一般也是以以下形式出现比较多
 * 			int[] array = new array[3];
 */
//例程

public class Demo{
	public static void main(String[] args) {
		//int array[] = null;//可以这样声明一个数组，但一般不这么玩，而采用以下形式
		int[] array = null;
		//动态初始化数组，并给三个元素分配堆内存
		array = new int[3];
		//打印元素的初始值
		for(int i = 0; i < 3; i++) {
			System.out.println("array["+i+"] = "+array[i]);
		}
		//分别给三个元素进行赋值
		array[0] = 11;
		array[1] = 22;
		array[2] = 33;
		//打印三个元素值
		for(int i = 0; i < array.length; i++) {
			System.out.println("array["+i+"] = "+array[i]);
		}
		//打印数组地址
		System.out.println("数组地址是："+array);
	}	
}

/*
 * 	例程编号：040
 * 	描述：
 * 		用静态初始化一个有3个元素的int数组，并打印每个元素及数组的地址
 * 	说明：
 * 		数组的静态初始化的形式有两种：
 * 			1：int[] array = new int[]{1,2,3};
 * 			2：int[] array = {1,2,3};
 */
//例程

public class Demo{
	public static void main(String[] args) {
		//用方式1，对int[] array1进行静态初始化
		int[] array1 = new int[] {1,2,3};
		System.out.println("array1中各元素值为：");
		for(int i = 0; i < array1.length; i++) {
			System.out.println("array1["+i+"] = "+array1[i]);
		}
		System.out.println("----------");//隔开
		//用方式2，对int[] array2进行静态初始化
		int[] array2 = {11,22,33};
		System.out.println("array2中各元素值为：");
		for(int i = 0; i < array2.length; i++) {
			System.out.println("array2["+i+"] = "+array2[i]);
		}
	}	
}

/*
 * 	例程编号：041
 * 	描述：
 * 		动态初始化和静态初始化的比较
 * 	说明：
 * 		动态初始化
 * 			声明实例化是一行代码，初始化赋值是另外一部分代码
 * 			具体过程：
 * 				声明：int[] array = null;在栈内存中开辟一个空间来存放数组的地址值
 * 				数组实例化：array = new int[3];在堆内存开辟3个int数据空间，并初始化为0
 * 				动态初始化：手动对三个元素进行初始化赋值
 * 		静态初始化：声明，实例化，初始化赋值都在同一段代码中完成，系统根据给定的元素开辟需要存放这些数据的空间
 */
//例程

public class Demo{
	public static void main(String[] args) {
		//以下对int array1[3]进行动态初始化，赋值并输出各元素值
		int[] array1 = new int[3];
		for(int i = 0; i < array1.length; i++) {
			array1[i] = i;
		}
		System.out.println("array1的各元素值是：");
		for(int i = 0; i < array1.length; i++) {
			System.out.println("array1["+i+"] = "+array1[i]);
		}
		//以下对int array2[3]进行静态初始化，并输出各元素
		int[] array2 = {11,22,33};
		System.out.println("array2的各元素值是：");
		for(int i = 0; i < array2.length; i++) {
			System.out.println("array2["+i+"] = "+array2[i]);
		}
	}	
}

/*
 * 	例程编号：042
 * 	描述：
 * 		数组的基础操作1，遍历数组
 * 	说明：
 * 		
 */
//例程

public class Demo{
	public static void main(String[] args) {
		//静态初始化数组
		int[] array = {11,22,33,44,55};
		System.out.println("数组array中的各元素值是：");
		System.out.print("array[");
		for(int i = 0; i < array.length; i++) {
			if(i == array.length-1) {
				System.out.println(array[i]+"]");
				break;
			}
			System.out.print(array[i] + " ");
		}
	}	
}

/*
 * 	例程编号：043
 * 	描述：
 * 		数组的基础操作2，求数组中元素的最大值
 * 	说明：
 * 		
 */
//例程

public class Demo{
	public static void main(String[] args) {
		//静态初始化数组
		int[] array = {11,22,33,44,55};
		int max = 0;
		for (int i =0; i < array.length; i++ ) {
			if(i == 0) {
				max = array[i];
				continue;
			}
			if(array[i] > max) {
				max = array[i];
			}
		}
		System.out.println("数组的最大值是："+max);
	}	
}

/*
 * 	例程编号：044
 * 	描述：
 * 		数组的基础操作3，求数组中元素的最小值
 * 	说明：
 * 		
 */
//例程

public class Demo{
	public static void main(String[] args) {
		//静态初始化数组
		int[] array = {11,22,33,44,55};
		int min = 0;
		for (int i =0; i < array.length; i++ ) {
			if(i == 0) {
				min = array[i];
				continue;
			}
			if(array[i] < min) {
				min = array[i];
			}
		}
		System.out.println("数组的最小值是："+min);
	}	
}

/*
 * 	例程编号：045
 * 	描述：
 * 		数组的基础操作4，逆序排列数组中的元素（两种方式）
 * 	说明：
 * 		
 */
//例程

public class Demo{
	public static void main(String[] args) {
		//静态初始化数组
		int[] array = {11,22,33,44,55};
		int temp = 0;
		System.out.println("排列前，数组中的元素值为：");
		System.out.print("array[");
		for(int i =0; i <array.length; i++) {
			if(i == array.length-1) {
				System.out.println(array[i]+"]");
				break;
			}
			System.out.print(array[i]+" ");
		}
		
		//对数组进行逆序排列，方式一：
		for(int i = 0; i < array.length/2;i++) {
			temp = array[i];
			array[i] = array[array.length-1-i];
			array[array.length-1-i] = temp;
		}
		
		System.out.println("排列后，数组中的元素值为：");
		System.out.print("array[");
		for(int i =0; i <array.length; i++) {
			if(i == array.length-1) {
				System.out.println(array[i]+"]");
				break;
			}
			System.out.print(array[i]+" ");
		}
		//对数组进行逆序排列，方式二：
				int start = 0;
				int end = 0;
				for(start = 0, end = array.length-1; start < end;start++, end--) {
					temp = array[start];
					array[start] = array[end];
					array[end] = temp;
				}
				
				System.out.println("排列后，数组中的元素值为：");
				System.out.print("array[");
				for(int i =0; i <array.length; i++) {
					if(i == array.length-1) {
						System.out.println(array[i]+"]");
						break;
					}
					System.out.print(array[i]+" ");
				}
	}	
}


/*
 * 	例程编号：046
 * 	描述：
 * 		数组的基础操作5，通过索引值查找数据
 * 	说明：
 * 		
 */
//例程

import java.util.Scanner;

public class Demo{
	public static void main(String[] args) {
		//静态初始化数组
		int[] array = {11,22,33,44,55};
		System.out.println("请输入要查找的数据的索引值：");
		Scanner sc = new Scanner(System.in);
		while(true) {
			int number = sc.nextInt();
			if(number <0 || number > array.length-1) {
				System.out.println("您输入的索引值超出了数组的索引范围，请在[0~"+(array.length-1)+"]中查找");
			} else {
				System.out.println("为您找到索引值为["+number+"]的数据是："+array[number]);
			}
		}
	}
}

/*
 * 	例程编号：047
 * 	描述：
 * 		数组的基础操作6，通过数据查索引值（两种方式）
 * 	说明：
 * 		
 */
//例程

import java.util.Scanner;

public class Demo{
	public static void main(String[] args) {
		//静态初始化数组
		int[] array = {11,22,33,44,55};
		//根据数据找索引值，方式一：
		Scanner sc = new Scanner(System.in);
		boolean flag = false;
		while(true) {
			if(flag == false) {
				System.out.println("请输入要查找索引值的数据：");
				int data = sc.nextInt();
				for(int i = 0; i < array.length; i++) {
					if(data == array[i]) {
						System.out.println("该数据的索引值是："+i);
						flag = true;
						break;
					}
					if(i == array.length-1) {
						System.out.println("没找到对应数据的索引值，该数据不存在");
					}
				} 
			} else {
				break;
				}
		}
		System.out.println("----------");
		//根据数据找索引值，方式二：
		flag = false;
		int index = 0;
		while(true) {
			if(flag == false) {
				System.out.println("请输入要查找索引值的数据：");
				int data = sc.nextInt();
				for(int i = 0; i < array.length; i++) {
					if(data == array[i]) {
						index = i;
						flag = true;
						break;
					}
					if(i == array.length-1) {
						System.out.println("没找到对应数据的索引值，该数据不存在");
					}
				} 
			} else {
				break;
				}
		}
		System.out.println("该数据的索引值是："+index);
	}
}

/*
 * 	例程编号：048
 * 	描述：
 * 		用方法实现数组的基本操作
 * 		1）遍历
 * 			public static void printArray(int[] array);
 * 		2）最大值
 * 			public static int getMax(int[] array);
 * 		3）最小值
 * 			public static int getMin(int[] array);
 * 		4）逆序1
 * 			public static void reverser1(int[] array);
 * 		5）逆序2
 * 			public static void reverser2(int[] array);
 * 		6）通过索引值找数据1
 * 			public static void printData(int[] array, int index);
 * 		7）通过索引值找数据2
 * 			public static int getData(int[] array, int index);
 * 		8）通过数据找索引值1
 * 			public static void printIndex(int[] array, int data);
 * 		9）通过数据找索引值2
 * 			public static int getIndex(int[] array, int data);
 * 	说明：
 * 		
 */
//例程

public class Demo{
	public static void main(String[] args) {
		//静态初始化数组
		int[] array = {11,22,33,44,55};
		//测试遍历
		System.out.println("进行数组的遍历：");
		printArray(array);
		System.out.println("----------");
		//测试求最大值
		System.out.println("数组最大值是："+getMax(array));
		System.out.println("----------");
		//测试求最小值
		System.out.println("数组最小值是："+getMin(array));
		System.out.println("----------");
		//测试方式一逆序
		System.out.println("数组逆序前：");
		printArray(array);
		System.out.println("用方式一进行数组的逆序操作：");
		reverser1(array);
		System.out.println("逆序后的数组：");
		printArray(array);
		System.out.println("----------");
		//测试方式二逆序
		System.out.println("用方式二进行逆序操作：");
		reverser2(array);
		System.out.println("方式二逆序后：");
		printArray(array);
		System.out.println("----------");
		//测试打印通过索引值查找的数据
		System.out.println("正在查找索引值为3的数据：");
		printData(array, 3);
		System.out.println("----------");
		//测试通过索引值查找并返回对应的数据
		System.out.println("正在超早索引值为2的数据：");
		System.out.println("该数据是："+getData(array, 2));
		System.out.println("----------");
		//测试打印通过数据查找的索引值
		System.out.println("正在查找数据为33的索引值：");
		printIndex(array,33);
		System.out.println("----------");
		//测试通过数据查找并返回对应的索引值
		System.out.println("正在超早索引值为2的数据：");
		System.out.println("该数据是："+getIndex(array, 22));
		System.out.println("----------");
		
		
		
	}
	
	//1）遍历
	public static void printArray(int[] array)
	{
		System.out.println("数组中各元素值为：");
		System.out.print("array[");
		for(int i = 0; i < array.length; i++) {
			if(i == array.length-1) {
				System.out.println(array[i]+"]");
				break;
			} else {
				System.out.print(array[i]+" ");
			}
		}
	}
	
	//2）最大值
	public static int getMax(int[] array) {
		int max = 0;
		for(int i =0; i < array.length; i++) {
			if(i == 0) {
				max = array[i];
				continue;
			}
			if(max < array[i]) {
				max = array[i];
			}
		}
		return max;
	}
	
	//3）最小值
	public static int getMin(int[] array) {
		int min = 0;
		for(int i =0; i < array.length; i++) {
			if(i == 0) {
				min = array[i];
				continue;
			}
			if(min > array[i]) {
				min = array[i];
			}
		}
		return min;
	}
	
	//4）逆序1
	public static void reverser1(int[] array) {
		int temp = 0;
		for (int i = 0; i < array.length/2; i++) {
			temp = array[i];
			array[i] = array[array.length-1-i];
			array[array.length-1-i] = temp;
		}
	}
	
	//5）逆序2
	public static void reverser2(int[] array) {
		int temp = 0;
		int start = 0, end = 0;
		for (start = 0, end = array.length-1;start < end; start++, end--) {
			temp = array[start];
			array[start] = array[end];
			array[end] = temp;
		}
	}
	
	//6）通过索引值找数据1
	public static void printData(int[] array, int index) {
		if(index < 0 || index > array.length-1) {
			System.out.println("您输入的索引值有误，请输入[0~"+(array.length-1)+"]之间的值");
		} else {
			System.out.println("索引值"+index+"所对应的数据是："+array[index]);
		}
	}
	
	//7）通过索引值找数据2
	public static int getData(int[] array, int index) {
		if(index < 0 || index > array.length-1) {
			System.out.println("您输入的索引值有误，请输入[0~"+(array.length-1)+"]之间的值");
			return -1;
		} else {
			return array[index];
		}
	}
	
	//8）通过数据找索引值1
	public static void printIndex(int[] array, int data) {
		for(int i = 0; i < array.length; i++) {
			if(array[i] == data) {
				System.out.println("找到了数据"+data+"的索引号是："+i);
			}
			if(i == array.length-1) {
				System.out.println("您输入的数据不存在");
			}
		}
	}
	
	//9）通过数据找索引值2
	public static int getIndex(int[] array, int data) {
		int index = 0;
		for(int i = 0; i < array.length;i++) {
			if(array[i] == data) {
				index = i;
				break;
			}
			if (i == array.length-1 ) {
				System.out.println("你输入的数据不存在");
			}
		}
		return index;
	}
}




















